// Partition: Write code to partition a linked list around a value x, such that all nodes less than x come
// before all nodes greater than or equal to x . lf x is contained within the list, the values of x only need
// to be after the elements less than x (see below) . The partition element x can appear anywhere in the
// "right partition"; it does not need to appear between the left and right partitions.
#include <iostream>
#include "../linkedList/linkedList.h"

using namespace std;

void sum_lists(linkedList* sll1,linkedList* sll2,linkedList* sll3){
    int carry = 0;
    node* ptr1 = sll1->get_head();
    node* ptr2 = sll2->get_head();
    while(ptr1!=NULL||ptr2!=NULL){
        if(ptr1!=NULL&&ptr2!=NULL){
        int sum = ptr1->data+ptr2->data+carry;
        carry = sum/10;
        sum = sum%10;
        sll3->insert_end(sum);
        ptr1 = ptr1->next;
        ptr2 = ptr2->next;
        }
        else if(ptr1!=NULL){
            sll3->insert_end(ptr1->data);
            ptr1 = ptr1->next;
        }
        else if(ptr2!=NULL){
            sll3->insert_end(ptr2->data);
            ptr2 = ptr2->next;
        }
    }
}
// 6,3,2
// 3,6,2
int main() {

    linkedList sll1,sll2,sll3;
    int data1[] = {7,1,6};//{3,2,6,1};
    int data2[] = {5,9,2};//{3,2,6,1};
    
    int n = sizeof(data1)/sizeof(data1[0]);
    sll1.insert_array(data1,n);
    sll2.insert_array(data2,n);

//     cout<<endl;
//     sll.printNodes();
//     cout<<endl;
    
    
    sum_lists(&sll1,&sll2,&sll3);

//     sll.printNodes();
    cout<<endl;
    sll3.printNodes();

    return 0;
}